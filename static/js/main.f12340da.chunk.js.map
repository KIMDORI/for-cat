{"version":3,"sources":["cal.js","App.js","reportWebVitals.js","index.js"],"names":["Calculate","useState","defaultKcal","setKcal","toggle","setToggle","cnt","kcal","canKcal","setCanKcal","dryKcal","setDryKcal","calCanK","e","result","target","name","value","need","can","Math","round","className","type","placeholder","onChange","kg","style","width","textAlign","padding","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPA+DeA,MA7Df,WACE,IAKA,EAA+BC,mBAAS,GAAxC,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA8BJ,mBAAS,CACrCK,IAAK,EACLC,KAAM,KAFR,mBAAOC,EAAP,KAAgBC,EAAhB,KAIA,EAA8BR,mBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAKMC,EAAU,SAAAC,GACd,IAAMC,EAAM,2BACPN,GADO,kBAETK,EAAEE,OAAOC,KAAMH,EAAEE,OAAOE,QAE3BR,EAAWK,IAOPI,EAAmB,GAAZhB,EACTiB,EAAMX,EAAQF,IAAIE,EAAQD,KAE9B,OADAY,EAAMC,KAAKC,MAAMH,EAAKC,GAEpB,qCACE,sBAAKG,UAAU,WAAf,UACE,8BACE,uBAAOC,KAAK,SAASC,YAAY,qBAAMC,SAvB3B,SAAAZ,GAClB,IAAIa,EAAKb,EAAEE,OAAOE,MAClBd,EAAQ,GAAGuB,EAAG,OAoBV,kCAGA,8BACE,uBAAOH,KAAK,SAASC,YAAY,kCAASC,SAflC,SAAAZ,GACd,IAAIa,EAAKb,EAAEE,OAAOE,MAElBN,EAAWe,EAAG,QAWV,iDAGA,8BACE,uBAAOH,KAAK,SAASP,KAAK,OAAOQ,YAAY,4BAAQC,SAAUb,IADjE,qBAEE,uBAAOW,KAAK,SAASP,KAAK,MAAMQ,YAAY,IAAIG,MA1CvC,CACfC,MAAO,OACPC,UAAU,QACVC,QAAQ,GAuC+DL,SAAUb,IAF7E,gDAKF,sBAAKU,UAAU,UAAUS,QAAS,WAAO1B,GAAU,IAAnD,UACE,yBADF,gFAICD,GACC,sBAAKkB,UAAU,cAAf,4EACe,8BAAIpB,EAAJ,UADf,KACyC,uBADzC,+EAEkB,8BAAIgB,EAAJ,UAFlB,uBAEwC,uBAFxC,yCAGU,8BAAIE,KAAKC,MAAMF,EAAIT,GAAnB,OAHV,2EAG4D,8BCxCrDsB,MAbf,WACE,OACE,sBAAKV,UAAU,UAAf,UACE,iCACE,mGAIF,cAAC,EAAD,QCCSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f12340da.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction Calculate () {\n  const inputCan = {\n    width: '15px',\n    textAlign:'right',\n    padding:0\n  }\n  const [defaultKcal, setKcal] = useState(0);\n  const [toggle, setToggle] = useState(false);\n  const [canKcal, setCanKcal] = useState({\n    cnt: 1,\n    kcal: 30\n  });\n  const [dryKcal, setDryKcal] = useState(0);\n  const calDefaultK = e => {\n    let kg = e.target.value\n    setKcal(30*kg+70)\n  }\n  const calCanK = e => {\n    const result = {\n      ...canKcal,\n      [e.target.name]:e.target.value,\n    }\n    setCanKcal(result)\n  }\n  const calDryK = e => {\n    let kg = e.target.value\n\n    setDryKcal(kg/1000)\n  }\n  const need = defaultKcal*0.8;\n  let can = canKcal.cnt*canKcal.kcal;\n  can = Math.round(need-can);\n  return (\n    <>\n      <div className=\"cal-wrap\">\n        <p>\n          <input type=\"number\" placeholder=\"몸무게\" onChange={calDefaultK}/> kg인 애기는\n        </p>\n        <p>\n          <input type=\"number\" placeholder=\"사료 칼로리\" onChange={calDryK}/> kcal의 사료와 함께\n        </p>\n        <p>\n          <input type=\"number\" name=\"kcal\" placeholder=\"캔 칼로리\" onChange={calCanK}/> kcal의 캔\n          <input type=\"number\" name=\"cnt\" placeholder=\"0\" style={inputCan} onChange={calCanK} /> 개를 먹습니다.\n        </p>\n      </div>\n      <div className=\"cal-btn\" onClick={() => {setToggle(true)}}>\n        <span></span>\n        난 얼마나 먹을 수 있는 거지...\n      </div>\n      {toggle &&\n        <div className=\"result-wrap\">\n          애기의 기초대사량은 약 <b>{defaultKcal}kcal</b>, <br />\n          다이어트 시 에너지 요구량은 <b>{need}kcal</b> 입니다.<br/>\n          애기는 하루에 <b>{Math.round(can/dryKcal)}g</b>의 사료를 먹을 수 있습니다. <br />\n        </div>\n      }\n    </>\n  );\n}\n\nexport default Calculate;","import './App.css';\nimport Calculate from './cal';\n\nfunction App() {\n  return (\n    <div className=\"content\">\n      <header>\n        <h1>\n          애기 하루 급여량 계산기\n        </h1>\n      </header>\n      <Calculate />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}